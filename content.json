{"pages":[{"title":"关于","date":"2018-04-21T07:11:30.152Z","path":"about/index.html","text":""},{"title":"Tags","date":"2018-04-21T04:18:14.465Z","path":"tags/index.html","text":""},{"title":"Categories","date":"2018-04-21T04:18:14.461Z","path":"categories/index.html","text":""}],"posts":[{"title":"live555-python","date":"2018-04-23T11:41:02.000Z","path":"wiki/杂项-live555-python/","text":"问题产生通过pip安装live555发现问题，找不到头文件查看pip下载的源码说明后赫然发现，尼玛pip只下载了Python安装脚本，但是live555的源码并没有下载。。。 手动安装安装环境 Python3.5 linux版本 deepin 15.6 gcc版本 4.8.5 (Debian 4.8.5-4) 安装准备 创建安装临时文件夹 12$ mkdir /tmp/test$ cd test 下载live555源码，我下的是最新版的live.2018.02.28。 1$ wget http://www.live555.com/liveMedia/public/live.2018.02.28.tar.gz 解压压缩文件 1$ tar -xf live.2018.02.28.tar.gz 下载Python安装脚本之前的pip命令输出内容显示了安装脚本下载地址，下载之。 1$ wget https://files.pythonhosted.org/packages/f3/1a/fbbf082cac0b7e8e7cad6581bd853b65db95c171671b3c4e42903c0e8dff/live555-1.0.tar.gz 解压压缩文件 1$ tar -xf live555-1.0.tar.gz 将源码拷贝进live555的安装脚本目录 1$ mv live live555-1.0 预编译live555 进入源码目录 1$ cd /tmp/test/live555-1.0/live 查看支持的目标平台 1$ ls 其中config.***内***为平台名称。由于我的电脑是基于 debian 发行的，因此，我在配置时选 linux。 配置编译参数 12$ export CPPFLAGS=-fPIC CFLAGS=-fPIC$ ./genMakefiles linux 编译 1make 安装 1$ sudo make install 编译Python库文件12$ cd ../$ sudo python3 setup.py build 如果发现报错说明之前没按照我的步骤来，依次运行如下命令，然后从预编译live555重试。 123$ sudo rm /usr/local/lib/libBasicUsageEnvironment.a /usr/local/lib/libgroupsock.a /usr/local/lib/libliveMedia.a /usr/local/lib/libUsageEnvironment.a$ cd live$ sudo make clean 测试是否安装成功12$ touch test.py$ vim test.py 按i键，将如下代码写入test.py 12import live555 as liveprint(live.__name__) 按esc退出编辑模式，按:wq保存 运行 Python 文件 1python3 test.py 若输出live555则安装成功。","tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"直播","slug":"直播","permalink":"http://yoursite.com/tags/直播/"},{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"},{"name":"live555","slug":"live555","permalink":"http://yoursite.com/tags/live555/"}],"categories":[{"name":"杂项","slug":"杂项","permalink":"http://yoursite.com/categories/杂项/"},{"name":"linux相关","slug":"杂项/linux相关","permalink":"http://yoursite.com/categories/杂项/linux相关/"}]},{"title":"live555安装","date":"2018-04-23T10:48:57.000Z","path":"wiki/杂项-live555安装/","text":"#live555安装 安装环境： gcc ： 4.8.5 linux发行版 ：deepin 安装步骤下载live555源码 去live555官网下载源码，我下的是最新版的live.2018.02.28。 解压压缩文件 1$ tar -xf live.2018.02.28.tar.gz 进入源码目录 1$ cd live ​​ 配置编译参数 查看支持的目标平台 1$ ls 其中 config.*** ***为平台名称。由于我的电脑是基于 debian 发行的，因此，我在配置时选 linux。 配置编译参数 1$ ./genMakefiles linux 编译并安装 编译 1$ make 安装 1$ sudo make install 问题及解决方案 我安装的时候没问题。。。欢迎在评论区留言提问","tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"直播","slug":"直播","permalink":"http://yoursite.com/tags/直播/"},{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"},{"name":"live555","slug":"live555","permalink":"http://yoursite.com/tags/live555/"}],"categories":[{"name":"杂项","slug":"杂项","permalink":"http://yoursite.com/categories/杂项/"},{"name":"linux相关","slug":"杂项/linux相关","permalink":"http://yoursite.com/categories/杂项/linux相关/"}]},{"title":"Front-matter","date":"2018-04-22T04:33:16.000Z","path":"wiki/Hexo官方文档-Front-matter/","text":"Front-matterFront-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，举例来说： 123title: Hello Worlddate: 2013/7/13 20:46:25--- 以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。 参数 描述 默认值 layout 布局 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址 分类和标签只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。 12345categories:- Diarytags:- PS3- Games 分类方法的分歧如果您有过使用WordPress的经验，就很容易误解Hexo的分类方式。WordPress支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是Hexo不支持指定多个同级分类。下面的指定方法：categories:- Diary- Life会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。 JSON Front-matter除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 --- 代换成 ;;; 即可。 123&quot;title&quot;: &quot;Hello World&quot;,&quot;date&quot;: &quot;2013/7/13 20:46:25&quot;;;;","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"帮助文档","slug":"帮助文档","permalink":"http://yoursite.com/tags/帮助文档/"},{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/博客/"}],"categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"博客","slug":"编程/博客","permalink":"http://yoursite.com/categories/编程/博客/"},{"name":"hexo","slug":"编程/博客/hexo","permalink":"http://yoursite.com/categories/编程/博客/hexo/"},{"name":"官方文档","slug":"编程/博客/hexo/官方文档","permalink":"http://yoursite.com/categories/编程/博客/hexo/官方文档/"},{"name":"2.基本操作","slug":"编程/博客/hexo/官方文档/2-基本操作","permalink":"http://yoursite.com/categories/编程/博客/hexo/官方文档/2-基本操作/"}]},{"title":"写作","date":"2018-04-22T03:25:44.000Z","path":"wiki/Hexo官方文档-写作/","text":"写作你可以执行下列命令来创建一篇新文章。 1$ hexo new [layout] &lt;title&gt; 您可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。 布局（Layout）Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。 布局 路径 post source/_posts page source draft source/_drafts 不要处理我的文章如果你不想你的文章被处理，你可以将 Front-Matter 中的layout: 设为 false 。 文件名称Hexo 默认以标题做为文件名称，但您可编辑 new_post_name 参数来改变默认的文件名称，举例来说，设为 :year-:month-:day-:title.md 可让您更方便的通过日期来管理文章。 变量 描述 :title 标题（小写，空格将会被替换为短杠） :year 建立的年份，比如， 2015 :month 建立的月份（有前导零），比如， 04 :i_month 建立的月份（无前导零），比如， 4 :day 建立的日期（有前导零），比如， 07 :i_day 建立的日期（无前导零），比如， 7 草稿刚刚提到了 Hexo 的一种特殊布局：draft，这种布局在建立时会被保存到 source/_drafts 文件夹，您可通过 publish 命令将草稿移动到 source/_posts 文件夹，该命令的使用方式与 new十分类似，您也可在命令中指定 layout 来指定布局。 1$ hexo publish [layout] &lt;title&gt; 草稿默认不会显示在页面中，您可在执行时加上 --draft 参数，或是把 render_drafts 参数设为 true 来预览草稿。 模版（Scaffold）在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如： 1$ hexo new photo &quot;My Gallery&quot; 在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章，以下是您可以在模版中使用的变量： 变量 描述 layout 布局 title 标题 date 文件建立日期","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"帮助文档","slug":"帮助文档","permalink":"http://yoursite.com/tags/帮助文档/"},{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/博客/"}],"categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"博客","slug":"编程/博客","permalink":"http://yoursite.com/categories/编程/博客/"},{"name":"hexo","slug":"编程/博客/hexo","permalink":"http://yoursite.com/categories/编程/博客/hexo/"},{"name":"官方文档","slug":"编程/博客/hexo/官方文档","permalink":"http://yoursite.com/categories/编程/博客/hexo/官方文档/"},{"name":"2.基本操作","slug":"编程/博客/hexo/官方文档/2-基本操作","permalink":"http://yoursite.com/categories/编程/博客/hexo/官方文档/2-基本操作/"}]},{"title":"迁移","date":"2018-04-22T03:22:14.000Z","path":"wiki/Hexo官方文档-迁移/","text":"迁移RSS首先，安装 hexo-migrator-rss 插件。 1$ npm install hexo-migrator-rss --save 插件安装完成后，执行下列命令，从 RSS 迁移所有文章。source可以是文件路径或网址。 1$ hexo migrate rss &lt;source&gt; Jekyll把 _posts 文件夹内的所有文件复制到 source/_posts 文件夹，并在 _config.yml 中修改 new_post_name 参数。 1new_post_name: :year-:month-:day-:title.md Octopress把 Octopress source/_posts 文件夹内的所有文件转移到 Hexo 的 source/_posts 文件夹，并修改 _config.yml 中的 new_post_name 参数。 1new_post_name: :year-:month-:day-:title.md WordPress首先，安装 hexo-migrator-wordpress 插件。 1$ npm install hexo-migrator-wordpress --save 在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)（详情参考WP支持页面）。 插件安装完成后，执行下列命令来迁移所有文章。source 可以是 WordPress 导出的文件路径或网址。 1$ hexo migrate wordpress &lt;source&gt; 注意这个插件并不能完美地实现WordPress-&gt;Hexo的数据转换，尤其是在处理WordPress的分类方面存在问题（见Front-matter中的分类与标签）。因此，建议您在迁移完成后，手工审阅所有生成的markdown文件，检查其中是否有错误。对于文章数量较大的WordPress站点，这项工作可能要花很长的时间。 Joomla首先，安装 hexo-migrator-joomla 插件。 1$ npm install hexo-migrator-joomla --save 使用 J2XML 组件导出 Joomla 文章。插件安装完成后，执行下列命令来迁移所有文章。source 可以是 Joomla 导出的文件路径或网址。 1$ hexo migrate joomla &lt;source&gt;","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"帮助文档","slug":"帮助文档","permalink":"http://yoursite.com/tags/帮助文档/"},{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/博客/"}],"categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"博客","slug":"编程/博客","permalink":"http://yoursite.com/categories/编程/博客/"},{"name":"hexo","slug":"编程/博客/hexo","permalink":"http://yoursite.com/categories/编程/博客/hexo/"},{"name":"官方文档","slug":"编程/博客/hexo/官方文档","permalink":"http://yoursite.com/categories/编程/博客/hexo/官方文档/"},{"name":"1.开始使用","slug":"编程/博客/hexo/官方文档/1-开始使用","permalink":"http://yoursite.com/categories/编程/博客/hexo/官方文档/1-开始使用/"}]},{"title":"指令","date":"2018-04-22T02:38:17.000Z","path":"wiki/Hexo官方文档-命令/","text":"指令init1$ hexo init [folder] 新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 new1$ hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 generate1$ hexo generate 生成静态文件。 选项 描述 -d, --deploy 文件生成后立即部署网站 -w, --watch 监视文件变动 该命令可以简写为 1$ hexo g publish1$ hexo publish [layout] &lt;filename&gt; 发表草稿。 server1$ hexo server 启动服务器。默认情况下，访问网址为： http://localhost:4000/。 选项 描述 -p, --port 重设端口 -s, --static 只使用静态文件 -l, --log 启动日记记录，使用覆盖记录格式 deploy1$ hexo deploy 部署网站。 参数 描述 -g, --generate 部署之前预先生成静态文件 该命令可以简写为： 1$ hexo d render1$ hexo render &lt;file1&gt; [file2] ... 渲染文件。 参数 描述 -o, --output 设置输出路径 migrate1$ hexo migrate &lt;type&gt; 从其他博客系统 迁移内容。 clean1$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 list1$ hexo list &lt;type&gt; 列出网站资料。 version1$ hexo version 显示 Hexo 版本。 选项安全模式1$ hexo --safe 在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。 调试模式1$ hexo --debug 在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。 简洁模式1$ hexo --silent 隐藏终端信息。 自定义配置文件的路径1$ hexo --config custom.yml 自定义配置文件的路径，执行后将不再使用 _config.yml。 显示草稿1$ hexo --draft 显示 source/_drafts 文件夹中的草稿文章。 自定义 CWD1$ hexo --cwd /path/to/cwd 自定义当前工作目录（Current working directory）的路径。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"帮助文档","slug":"帮助文档","permalink":"http://yoursite.com/tags/帮助文档/"},{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/博客/"}],"categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"博客","slug":"编程/博客","permalink":"http://yoursite.com/categories/编程/博客/"},{"name":"hexo","slug":"编程/博客/hexo","permalink":"http://yoursite.com/categories/编程/博客/hexo/"},{"name":"官方文档","slug":"编程/博客/hexo/官方文档","permalink":"http://yoursite.com/categories/编程/博客/hexo/官方文档/"},{"name":"1.开始使用","slug":"编程/博客/hexo/官方文档/1-开始使用","permalink":"http://yoursite.com/categories/编程/博客/hexo/官方文档/1-开始使用/"}]},{"title":"配置","date":"2018-04-22T02:29:00.000Z","path":"wiki/Hexo官方文档-配置/","text":"配置您可以在 _config.yml 中修改大部份的配置。 网站 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 author 您的名字 language 网站使用的语言 timezone 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。 网址 参数 描述 默认值 url 网址 root 网站根目录 permalink 文章的 永久链接格式 :year/:month/:day/:title/ permalink_defaults 永久链接中各部分的默认值 网站存放在子目录如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。 目录 参数 描述 默认值 source_dir 资源文件夹，这个文件夹用来存放内容。 source public_dir 公共文件夹，这个文件夹用于存放生成的站点文件。 public tag_dir 标签文件夹 tags archive_dir 归档文件夹 archives category_dir 分类文件夹 categories code_dir Include code 文件夹 downloads/code i18n_dir 国际化（i18n）文件夹 :lang skip_render 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 提示如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。 文章 参数 描述 默认值 new_post_name 新文章的文件名称 :title.md default_layout 预设布局 post auto_spacing 在中文和英文之间加入空格 false titlecase 把标题转换为 title case false external_link 在新标签中打开链接 true filename_case 把文件名称转换为 (1) 小写或 (2) 大写 0 render_drafts 显示草稿 false post_asset_folder 启动 Asset 文件夹 false relative_link 把链接改为与根目录的相对位址 false future 显示未来的文章 true highlight 代码块的设置 相对地址默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为example.com,您有一篇文章名为hello，那么绝对链接可能像这样：http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。 分类 &amp; 标签 参数 描述 默认值 default_category 默认分类 uncategorized category_map 分类别名 tag_map 标签别名 日期 / 时间格式Hexo 使用 Moment.js 来解析和显示时间。 参数 描述 默认值 date_format 日期格式 YYYY-MM-DD time_format 时间格式 H:mm:ss 分页 参数 描述 默认值 per_page 每页显示的文章量 (0 = 关闭分页功能) 10 pagination_dir 分页目录 page 扩展 参数 描述 theme 当前主题名称。值为false时禁用主题 deploy 部署部分的设置","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"帮助文档","slug":"帮助文档","permalink":"http://yoursite.com/tags/帮助文档/"},{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/博客/"}],"categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"博客","slug":"编程/博客","permalink":"http://yoursite.com/categories/编程/博客/"},{"name":"hexo","slug":"编程/博客/hexo","permalink":"http://yoursite.com/categories/编程/博客/hexo/"},{"name":"官方文档","slug":"编程/博客/hexo/官方文档","permalink":"http://yoursite.com/categories/编程/博客/hexo/官方文档/"},{"name":"1.开始使用","slug":"编程/博客/hexo/官方文档/1-开始使用","permalink":"http://yoursite.com/categories/编程/博客/hexo/官方文档/1-开始使用/"}]},{"title":"建站","date":"2018-04-22T01:24:32.000Z","path":"wiki/Hexo官方文档-建站/","text":"建站安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 新建完成后，指定文件夹的目录如下： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.yml网站的 配置 信息，您可以在此配置大部分的参数。 package.json应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。 12345678910111213141516171819package.json&#123; &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: &#123; &quot;version&quot;: &quot;&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;hexo&quot;: &quot;^3.0.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.0&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.0&quot;, &quot;hexo-generator-index&quot;: &quot;^0.1.0&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.1.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.1.0&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.2.4&quot;, &quot;hexo-server&quot;: &quot;^0.1.2&quot; &#125;&#125; scaffolds模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。 Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。 source资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes主题 文件夹。Hexo 会根据主题来生成静态页面。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"帮助文档","slug":"帮助文档","permalink":"http://yoursite.com/tags/帮助文档/"},{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/博客/"}],"categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"博客","slug":"编程/博客","permalink":"http://yoursite.com/categories/编程/博客/"},{"name":"hexo","slug":"编程/博客/hexo","permalink":"http://yoursite.com/categories/编程/博客/hexo/"},{"name":"官方文档","slug":"编程/博客/hexo/官方文档","permalink":"http://yoursite.com/categories/编程/博客/hexo/官方文档/"},{"name":"1.开始使用","slug":"编程/博客/hexo/官方文档/1-开始使用","permalink":"http://yoursite.com/categories/编程/博客/hexo/官方文档/1-开始使用/"}]},{"title":"概述","date":"2018-04-21T16:11:31.000Z","path":"wiki/Hexo官方文档-概述/","text":"概述欢迎使用 Hexo，本文档将帮助您快速上手。如果您在使用过程中遇到问题，请查看 问题解答 中的解答，或者在 GitHub、Google Group 上提问。 什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown （或其他渲染引擎） 解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装安装 Hexo 只需几分钟时间，若您在安装过程中遇到问题或无法找到解决方式，请提交问题，我会尽力解决您的问题。 安装前提安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序： Node.js Git 如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。1$ npm install -g hexo-cli 如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。 Mac 用户您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。 安装git Windows: 下载并安装 git. Mac 使用 Homebrew,MacPorts: brew install git;或下载 安装程序 安装。 Linux (Ubuntu, Debian): sudo apt-get install git-core Linux (Fedora, Red Hat, CentOS): sudo yum install git-core Windows 用户由于众所周知的原因，从上面的链接下载git for windows最好挂上一个代理，否则下载速度十分缓慢。也可以参考这个页面，收录了存储于百度云的下载地址。 安装 Node.js安装 Node.js 的最佳方式是使用 nvm。 Curl: 1$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh Wget: 1$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh 安装完成后，重启终端并执行下列命令即可安装 Node.js。 1$ nvm install stable 或者您也可以下载 安装程序 来安装。 Windows 用户对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。另外，您也可以使用Git Bash，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。 安装 Hexo所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 1$ npm install -g hexo-cli","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"帮助文档","slug":"帮助文档","permalink":"http://yoursite.com/tags/帮助文档/"},{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/博客/"}],"categories":[{"name":"编程","slug":"编程","permalink":"http://yoursite.com/categories/编程/"},{"name":"博客","slug":"编程/博客","permalink":"http://yoursite.com/categories/编程/博客/"},{"name":"hexo","slug":"编程/博客/hexo","permalink":"http://yoursite.com/categories/编程/博客/hexo/"},{"name":"官方文档","slug":"编程/博客/hexo/官方文档","permalink":"http://yoursite.com/categories/编程/博客/hexo/官方文档/"},{"name":"1.开始使用","slug":"编程/博客/hexo/官方文档/1-开始使用","permalink":"http://yoursite.com/categories/编程/博客/hexo/官方文档/1-开始使用/"}]},{"title":"欢迎","date":"2018-04-21T07:42:51.778Z","path":"wiki/index/","text":"欢迎来到我的博客之前接触过各种各样的博客系统，有 WordPress, 有zblog。 最终落户Hexo。相比于其它博客系统，基于gitpage搭建Hexo省去了网站维护的麻烦，专注于文章的写作，是一款专为博客而生的系统。 在学习知识的过程中，发现自己薄弱的记忆力无法承载浩瀚的知识海洋，经常学过就忘，等再次用还得接着去谷歌，百度，逛论坛。于是萌生了组织自己的知识库的想法。 这是我第一次将自己的博客放到公网上边，也是我第一次正式写博客，如果有什么好的建议或者发现哪些问题，欢迎到评论区留言，我会积极回复的。","tags":[],"categories":[]},{"title":"Hello World","date":"2018-04-21T04:37:43.999Z","path":"wiki/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[],"categories":[]}]}